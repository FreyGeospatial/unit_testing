# this is an example of a unit testimport unittestfrom my_sum import sum # loads in specific function from package/library 'my_sum', which is just a subdirectory of the project folder.# class TestSum(unittest.TestCase): # Defines a new test case class called TestSum, which inherits from unittest.TestCase, part of the unittest library    def test_list_int(self):        """        Test that it can sum a list of integers        """        data = [1, 2, 3]        result = sum(data)        self.assertEqual(result, 6) # help(unittest.TestCase.assertEqual) -- takes two objects. Fails if the objects are unequal                                        # This will help us test that our function will actually sum properly. It will take a list of integers                                        # known to sum to 6.if __name__ == '__main__':    unittest.main() # if you execute the script alone by running python test.py at the command line, it will call unittest.main()                    # This executes the test runner by discovering all classes in this file that inherit from unittest.TestCase.                                        # When you have a single test file named test.py, calling python test.py is a great way to get started.                                        # Another way is using the unittest command line:                        # $ python -m unittest test                        # This will execute the same test module (called test) via the command line.                        # You can provide additional options to change the output. One of those is -v for verbose. Try that next. (see terminal output in repo)# verbose option executed the one test inside test.py and printed the results # to the console. Verbose mode listed the names of the tests it executed first, # along with the result of each test.#Instead of providing the name of a module containing tests, # you can request an auto-discovery using python -m unittest discover (see terminal output)# Once you have multiple test files, as long as you follow the test*.py naming pattern, # you can provide the name of the directory instead by using the -s flag and # the name of the directory: $ python -m unittest discover -s tests